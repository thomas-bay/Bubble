// --------------------------------
// Main file of the Bubble project.
// --------------------------------
#include "Particle.h"
#include "EventClass.h"
#include "BlinkClass.h"
#include "version.h"

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)


/*------------

This program uses the MMA8451 accelerometer chip to detect vibrations generated by bubbles
flowing through the waterfilled aitlock on the beer fermentation tank.

The I2C interface to the MMA8451 uses pins
    SCL => D1
    SDA => D0

The D7 LED blinks in a 20% PWN pattern with period 5 sec.

-------------*/
String Version;

int BlinkTheLed = TRUE;

int LEDStatus;
int LoopCounter = 0;

class Version V;
class Event E;

#ifndef USE_SWD_JTAG
  class Blink B(D7);
#else
  class Blink B(D2);
#endif

// The setup function is a standard part of any microcontroller program.
// It runs only once when the device boots up or is reset.
int ledCommand(String command);

// telnet defaults to port 10000
TCPServer server = TCPServer(10000);
TCPClient client;

int RxCh;
int TestCount1, TestCount2;
bool TestFlag = false, PushFlag = false;

void Test1()
{
  TestCount1++;
}

void Test2()
{
  TestCount2++;
  TestFlag = true;
}

void TimeSync()
{
  Particle.syncTime();
  Serial.printlnf("timesync");
}

byte serverIP[] = { 10, 0, 0, 13 }; // PC IP

void PushCommand()
{
  PushFlag = true;
}

void PushData()
{
  if (client.connected())
    client.stop();


  if (client.connect(serverIP, 8003))
  {
    Serial.println("connected");
    client.println(Time.timeStr());
    client.stop();
  }
  else
  {
    // no connection
  }
}


void setup() {

  int StartupTimeout = 0;

  // We are going to tell our device that D0 and D7 (which we named led1 and led2 respectively) are going to be output
  // (That means that we will be sending voltage to them, rather than monitoring voltage that comes from them)

  // Setup the version/compilation date
  Version = V.getVersionAndTimeDate().c_str();
  Time.zone(2);   // Set timezone to UTC+1 (and summertime)

  // Publish the variables and functions
  Particle.function("Led", ledCommand);
  Particle.variable("LEDStatus", LEDStatus);
  Particle.variable("LoopCounter", LoopCounter);
  Particle.variable("Vers", Version);
  Particle.variable("Blin||k", BlinkTheLed);

  // Wait for something to happen in the serial input
  Serial.begin(9600);
  while(!Serial.available()) Particle.process();
  while(Serial.read() != -1);

  // Start TCP server and print the WiFi data
  server.begin();
  Serial.println(WiFi.localIP());
  Serial.println(WiFi.subnetMask());
  Serial.println(WiFi.gatewayIP());
  Serial.println(WiFi.SSID());

  // Define the blinking pattern
  B.AddState(1000,  HIGH);
  B.AddState(4000,  LOW);
  B.Print();

  E.AddEvent(1000,  Test1);
  E.AddEvent(10000, Test2);
  E.AddEvent(ONE_DAY_MILLIS, TimeSync);   // Syncronize time once a day
  E.AddEvent(5000, PushCommand);

  Wire.begin();
}

// Next we have the loop function, the other essential part of a microcontroller program.
// This routine gets repeated over and over, as quickly as possible and as many times as possible, after the setup function is called.
// Note: Code that blocks for too long (like more than 5 seconds), can make weird things happen (like dropping the network connection).  The built-in delay function shown below safely interleaves required background activity, so arbitrarily long delays can safely be done if you need them.

void loop() {
  

  if (BlinkTheLed == TRUE) {

    B.Action(); // This makes the LED blink without using delay().
    E.Tick();

    if ((LoopCounter++ % 5000) == 0) {

      Particle.publish("loopevent", "ged");
      Serial.printlnf("Loop = %i", LoopCounter);
      Serial.printlnf("Blink = %i", B.getCalls());
      Serial.printlnf("TestCount1 = %i", TestCount1);
      Serial.printlnf("TestCount2 = %i", TestCount2);

      // If more than 15 chars have been received then
      // echo them.

      // Loop the received data on serial back to terminal.
      while (Serial.available()) {
        Serial.write(Serial.read());
      }
    }
  }

/*  // If a client has connection, then loop all data
  if (client.connected()) {
    // echo all available bytes back to the client
    while (client.available()) {
      RxCh = client.read();
      server.write(RxCh);
      Serial.write(RxCh);
    }
  } else {
    // if no client is yet connected, check for a new connection
    client = server.available();
  }
*/
  LEDStatus = BlinkTheLed;
  // And repeat!

  if (TestFlag)
  {
    TestFlag = false;
    Serial.printlnf(Time.timeStr());
  }

  if (PushFlag)
  {
    PushFlag = false;
    PushData();
  }
}

int ledCommand(String command) {

  if (command == "on")
  {
    BlinkTheLed = TRUE;
    return 1;
  }
  else
    BlinkTheLed = FALSE;

  return 0;
}
